#!/usr/bin/perl
#
# This script takes as standard input the extracted text from a
# stanford-bot-generated SRT file, and reformats it into something
# that is more sensible (in terms of line breaks) for use as subtitles.
#
# Apostrophes and quotation marks are left alone since I don't want to
# deal with them in a script at this moment.
#
# Notes:
#
# 1. This script assumes that its input has already been processed with
#    extract-text-from-srt. In other words it can't deal with a real
#    SRT file. The time codes must already have been removed.
#
# 2. The script will not produce something that's 100% correct. For
#    example it will treat all periods as end of segment markers,
#    even if it is the period in "Mr." or "No.". You need to pull out
#    vi and do some minimal post-processing before pasting the results
#    back into Universal Subtitles.
#

use strict;
use integer;

sub THRES () { 79 }

my $guessed_end_of_segment = '[\.\?!:;]"?';

my $possibly_end_of_segment = '(' . $guessed_end_of_segment . ')\s';
my $possibly_same_segment = '((?:(?!' . $guessed_end_of_segment . '\s).)*)';

my $guessed_end_of_fragment = '[,]"?';

my $possibly_end_of_fragment = '(' . $guessed_end_of_fragment . ')\s';
my $possibly_same_fragment = '((?:(?!' . $guessed_end_of_fragment . '\s).)*)';

my $guessed_start_of_shard = '\s((?:and|because|except that|for which|how|in which|that|what|when|whether|whose|why)\s)';

sub break_into_shards ($) {
    my($s) = @_;
    my @shards;
    while ($s =~ /$guessed_start_of_shard/) {
	push @shards, $`;
	$s = "$1$'";
    }
    push @shards, $s if $s =~ /\S/;
    return @shards;
}

sub break_into_fragments ($) {
    my($s) = @_;

    # We can't just use split, because that would require a variable-length
    # lookbehind, which is not implemented.
    my @fragments;
    while ($s =~ /^$possibly_same_fragment$possibly_end_of_fragment(.*)$/) {
	my $fragment = "$1$2";
	$s = $3;
	if (length $fragment > THRES) {
	    push @fragments, break_into_shards $fragment;
	} else {
	    push @fragments, $fragment;
	}
    }
    push @fragments, $s if $s =~ /\S/;
    return @fragments;
}

sub dump_segment ($) {
    my($s) = @_;
    for my $fragment ((length $s > THRES)? break_into_fragments $s: $s) {
	print "$fragment\n";
    }
}

sub dump_extracted_text ($) {
    my($s) = @_;
    while ($s =~ /^$possibly_same_segment$possibly_end_of_segment(.*)$/s) {
	$s = $3;
	dump_segment "$1$2";
    }
    return $s;
}

my $buffer = '';
for (;;) {
    my $line = scalar <>;
last unless defined $line;
    chomp $line;
    $buffer .= ' ' if $buffer;
    $buffer .= $line;
    while ($buffer =~ /$possibly_end_of_segment/) {
	$buffer = dump_extracted_text $buffer;
    }
}
$buffer = dump_extracted_text $buffer;
dump_segment $buffer;
