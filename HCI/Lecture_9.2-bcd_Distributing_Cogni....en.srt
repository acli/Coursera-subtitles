1
00:00:02,051 --> 00:00:06,032
We’ve all heard the saying that a picture is worth ten thousand words.

2
00:00:06,032 --> 00:00:11,074
This idea of worth is interesting because it implies some kind of interchangeability,

3
00:00:11,074 --> 00:00:18,047
that there are some rate at which you can convert one representation into another representation.

4
00:00:18,047 --> 00:00:22,016
How might we establish that interchangeability?

5
00:00:24,024 --> 00:00:27,083
One type of interchangeability is informational equivalence.

6
00:00:27,083 --> 00:00:30,034
Two representations are informationally equivalent

7
00:00:30,034 --> 00:00:35,011
if all the information [that] is present in one can also be inferred from the other.

8
00:00:36,047 --> 00:00:40,040
But just because the same information is theoretically inferable

9
00:00:40,040 --> 00:00:43,068
doesn’t mean it will take the same required effort to extract it.

10
00:00:46,018 --> 00:00:50,011
Some representations require more steps to compute and inference.

11
00:00:50,011 --> 00:00:52,098
And the difference in the perceiver’s computational effort

12
00:00:52,098 --> 00:00:56,091
presents both challenges and opportunities for you as a designer.

13
00:00:56,091 --> 00:00:59,088
Let’s look at an example.

14
00:00:59,088 --> 00:01:05,023
Let’s take the sentence “A pair of parallel lines is cut by a transversal.”

15
00:01:05,023 --> 00:01:08,089
This cut generates eight angles.

16
00:01:08,091 --> 00:01:14,079
From the sentence, it’s difficult to reason about which pairs form the alternate interior angles.

17
00:01:14,079 --> 00:01:23,007
And in fact if you to try, you’ll find yourself creating a mental image of two parallel lines cut by a transversal.

18
00:01:24,010 --> 00:01:26,056
With a diagram like this, however,

19
00:01:26,056 --> 00:01:32,091
the sentence and the diagram are informationally equivalent but computationally different for the perceiver.

20
00:01:33,048 --> 00:01:37,042
One major benefit of the graphical user interface over the command line

21
00:01:37,042 --> 00:01:45,027
is that the graphical user interface enables many common actions to be perception tasks requiring little inference.

22
00:01:46,022 --> 00:01:52,008
So far we’ve seen a number of examples of how distributed cognition can help individual work.

23
00:01:52,008 --> 00:01:55,052
Distributed cognition can also have powerful benefits for group work.

24
00:01:55,052 --> 00:01:59,034
And just to give you a quick sense of what this might be like,

25
00:01:59,034 --> 00:02:04,077
I’ll give you an example from Ed Hutchin’s research on airplane cockpits.

26
00:02:04,077 --> 00:02:08,072
One of the things that Ed observed is that the artifacts in the cockpit

27
00:02:08,072 --> 00:02:13,087
help coordinate action between the multiple people that work there — the pilots.

28
00:02:13,087 --> 00:02:21,096
And so, for example, one instance of this is the speed dial where, on landing and takeoff,

29
00:02:21,096 --> 00:02:26,052
it’s incredibly important to have the speed be accurate

30
00:02:26,052 --> 00:02:31,058
because you are at the most critical part of the airplane — You’re close to the ground;

31
00:02:31,058 --> 00:02:37,011
The wings aren’t designed for… they are designed primarily for going long-haul, very high,

32
00:02:37,011 --> 00:02:39,052
and the shape of the wings has to be changed

33
00:02:39,052 --> 00:02:43,032
to accommodate the low speeds that are required for landing and takeoff.

34
00:02:43,032 --> 00:02:51,024
And so the multiple pilots on a large airplane need to coordinate their efforts in several important ways.

35
00:02:51,024 --> 00:02:56,088
There are several plastic indicators called “bugs” around the perimeter of the speedometer.

36
00:02:56,088 --> 00:03:03,020
And the pilots can manually set those bugs to do things like mark where a speed,

37
00:03:03,020 --> 00:03:10,011
what events should cause a change in the wing settings, and other things like that.

38
00:03:10,011 --> 00:03:15,097
And what’s nice about these bugs is that they are visible not just to the pilot that set them

39
00:03:15,097 --> 00:03:18,054
but to everybody else in the cockpit also.

40
00:03:18,054 --> 00:03:27,039
And so, by making [the] triggers for what will cause changes in action manifest to everybody,

41
00:03:27,039 --> 00:03:34,088
these artifacts can help coordinate collaboration and increase safety in cockpit situations.

42
00:03:40,045 --> 00:03:45,026
So, what we’ve seen here is that when interfaces help people distribute cognition,

43
00:03:45,026 --> 00:03:48,036
it can encourage experimentation like we saw in Tetris;

44
00:03:48,036 --> 00:03:52,009
it can scaffold learning and reduce errors, like we saw with the Montessori blocks;

45
00:03:52,009 --> 00:03:56,056
it can show only the differences that matter, like in the London Underground map;

46
00:03:56,056 --> 00:04:01,049
it can convert slow calculation in the fast perception, like we saw with the map coloring;

47
00:04:01,049 --> 00:04:07,090
it can support chunking, especially by experts, as we saw with chess, and with gestural interfaces;

48
00:04:07,090 --> 00:04:12,017
it can increase efficiency as we saw with diagrammatic representations;

49
00:04:12,017 --> 00:04:15,093
and it can facilitate collaboration like we saw in the cockpit.

50
00:04:17,056 --> 00:04:20,050
Given all of these benefits of good representations,

51
00:04:20,050 --> 00:04:24,034
it’s kind of surprising that a whole lot of actual interfaces that are out there

52
00:04:24,034 --> 00:04:29,069
offer a really crummy job at being able to help people distribute their cognitive efforts.

53
00:04:29,069 --> 00:04:32,096
So I call these poor representations “common but deadly.”

54
00:04:32,096 --> 00:04:36,038
Let’s take a look at a couple of them. Here’s one:

55
00:04:36,038 --> 00:04:38,094
I was at a symposium at IBM a couple of years ago.

56
00:04:38,094 --> 00:04:42,099
To get on their Wi-Fi network, I needed to enter a password.

57
00:04:42,099 --> 00:04:46,094
And, I typed in a password that I thought would be just fine.

58
00:04:46,094 --> 00:04:51,077
And the Wi-Fi system told me “The password you typed is not valid; please change it.”

59
00:04:51,077 --> 00:04:54,098
What do I need to change it to though?

60
00:04:54,098 --> 00:04:59,063
All passwords often have different requirements, like mixtures of upper- and lowercase letters,

61
00:04:59,063 --> 00:05:05,015
the presence or absence of numbers or special modifier keys,

62
00:05:05,015 --> 00:05:12,049
and there’s no way for me to know from the screen what the problem with the password that I entered was.

63
00:05:13,013 --> 00:05:19,041
This representation would obviously be a heck of a lot better if, when I entered the password, it said,

64
00:05:19,041 --> 00:05:21,070
“You need a password that’s at least ten characters long,

65
00:05:21,070 --> 00:05:27,076
or that contains a mixture of upper- and lowercase characters, or that has at least one number.”

66
00:05:27,076 --> 00:05:31,062
And that could be validated the first time that I typed in the new password,

67
00:05:31,062 --> 00:05:35,080
as supposed to I have to wait till I type in both, hit Go, and it says, “Uh-oh.”

68
00:05:37,003 --> 00:05:42,076
Here’s another example: NASA invited me to give a talk in an event they had in San Francisco a year or so ago

69
00:05:42,076 --> 00:05:51,040
and the registration for this event was… here — this is the web form from it — and I thought I registered.

70
00:05:51,040 --> 00:05:57,047
I clicked Go and after hitting Next, it said “You must fill out all registered fields” —

71
00:05:57,047 --> 00:06:00,077
You can see that at the top of the screen right here.

72
00:06:00,079 --> 00:06:07,036
And, totally frustrating if you tried to register because you’re like “Well… Which one did I miss?”

73
00:06:07,036 --> 00:06:15,093
It would be a lot more effective if, for example, you could highlight the things that it thinks you need to fill out,

74
00:06:15,093 --> 00:06:22,005
or it could create a smaller form that has only the parts that you missed the last time around

75
00:06:22,005 --> 00:06:25,092
and says “Here is the one thing you needed to fill that out before continuing.”

76
00:06:27,032 --> 00:06:33,096
Here’s another example: This is from BBEdit and it when I tried to save it says,

77
00:06:33,096 --> 00:06:40,055
“Document encoding mismatch. The document contains data which describes its encoding as UTF-8.

78
00:06:40,055 --> 00:06:44,052
But the encoding has been set to Western (ISO Latin-1).”

79
00:06:44,052 --> 00:06:52,039
And I have two options here. One of them is Cancel, and another one is Save Anyway.

80
00:06:52,039 --> 00:07:00,057
But the actions that I’d like to be able to do are probably something like “Make everything UTF-8”,

81
00:07:00,057 --> 00:07:10,005
or “Make everything Latin-1”, or “Hey computer, tell me which of these probably makes more sense;

82
00:07:10,005 --> 00:07:15,029
help me choose between these”, or “It doesn’t matter.”

83
00:07:15,029 --> 00:07:21,012
But the information that I need to be able to make a decision simply isn’t present in the user interface.

84
00:07:21,012 --> 00:07:28,072
Dialog boxes should be action-oriented; they should help guide users towards what their next step is likely to be

85
00:07:28,072 --> 00:07:33,071
and it should provide them with the information that they need in order to be able to accomplish that next step.

86
00:07:34,085 --> 00:07:39,012
Here’s an interface that I think is intentionally designed to be sub-optimal:

87
00:07:39,012 --> 00:07:47,027
Here we have the eBay funding confirmation page, and if you look at this page,

88
00:07:47,027 --> 00:07:51,081
what you’ll see is if I switched to a credit card and it says,

89
00:07:51,081 --> 00:07:58,010
before you’ll go to a credit card, we’re going to give you this prompt that asks you to verify that

90
00:07:58,010 --> 00:08:06,088
and eBay and PayPal do this, of course, because they make more money if you see a bank account

91
00:08:06,088 --> 00:08:09,095
as opposed to have to pay the credit card transaction fee.

92
00:08:09,095 --> 00:08:16,003
And so, down at the bottom here, it offers you two buttons.

93
00:08:16,003 --> 00:08:20,094
One of them is “Pay with bank account” and the other one is “Pay with credit card.”

94
00:08:22,009 --> 00:08:26,068
Good action-oriented titles — I really like that part of this user interface.

95
00:08:26,068 --> 00:08:34,083
And what you see is that the account that they want you to pick is made nice and bright

96
00:08:34,083 --> 00:08:39,092
and the account that you probably want is dimmed out as if it’s inactive.

97
00:08:39,092 --> 00:08:42,069
Is this is a good user interface or a bad user interface?

98
00:08:42,069 --> 00:08:50,040
Well, user experience’s probably somewhat degraded; Paypal’s profit significant increases.

99
00:08:50,040 --> 00:08:54,092
And in a lot of real-world situations, you may need to make this trade-off.

100
00:08:54,092 --> 00:08:58,098
I think that more globally there are other ways that you could address this

101
00:08:58,098 --> 00:09:02,068
but I thought this was an interesting example of an interaction design

102
00:09:02,068 --> 00:09:09,083
that sacrificed some user experience in order to achieve higher profits.

103
00:09:09,083 --> 00:09:11,091
Hard to say whether it’s worth it.

104
00:09:11,091 --> 00:09:14,072
Here’s a dialog box for exporting a picture.

105
00:09:14,072 --> 00:09:21,069
We want to save that to JPEG, and the dialog box is notifying us that this JPEG already exists.

106
00:09:21,069 --> 00:09:23,032
And you got a couple of options.

107
00:09:23,032 --> 00:09:27,021
So one thing that I that I like about this future interface

108
00:09:27,021 --> 00:09:31,062
is that you get buttons that are really action-oriented here — that’s great.

109
00:09:31,062 --> 00:09:35,057
A challenge is: how do I know whether I want this file or not?

110
00:09:35,057 --> 00:09:40,026
I mean, what is “l1010235.jpg”?

111
00:09:40,026 --> 00:09:46,098
It would make a lot more sense if this dialog box showed me an icon of “here’s what this picture is”,

112
00:09:46,098 --> 00:09:50,059
and that way I could have a better sense of whether I wanted to override it,

113
00:09:50,059 --> 00:09:53,082
or skip this operation, or give it a brand new unique name.

114
00:09:54,076 --> 00:09:57,072
Here’s an example from Microsoft Outlook.

115
00:09:57,072 --> 00:10:02,086
This is a Duplicate Contact Detected dialog box.

116
00:10:02,086 --> 00:10:10,004
And it says that “Hey, you know, there’s some information here that already exists in your contacts.

117
00:10:10,004 --> 00:10:15,043
Do you want to update it or do you want to add this as a new contact?”

118
00:10:15,043 --> 00:10:19,048
The difficulty, of course, is I don’t know what’s in that contact right now

119
00:10:19,048 --> 00:10:25,075
and so this is not a decision that I can make from looking at this dialog box on its own.

120
00:10:25,075 --> 00:10:32,086
I can of course click Open Existing Contact; it’ll show me that information, but that’s one extra step down the line.

121
00:10:33,096 --> 00:10:37,023
Microsoft improved this in a subsequent version of Outlook.

122
00:10:37,080 --> 00:10:42,033
Its dialog box is probably still more complicated that it really needs to be:

123
00:10:42,033 --> 00:10:45,011
I think it could be streamline significantly;

124
00:10:45,011 --> 00:10:49,072
but what it does do is it shows me the two things that I really need to know:

125
00:10:49,072 --> 00:10:56,001
The first of these is what the final outcome of the process is going to look like —

126
00:10:56,001 --> 00:11:00,011
so, “After we’ve merged these things, here’s what you’ll get.”

127
00:11:00,011 --> 00:11:02,076
And the other thing it’s going to show me

128
00:11:02,076 --> 00:11:06,043
is “Here’s the piece of information that we’re going to change in order to make that happen.”

129
00:11:07,034 --> 00:11:11,076
One way that I think this dialog box could be streamlined is that,

130
00:11:11,076 --> 00:11:22,068
while it shows that the final information this way and it gives us the “so I can change this or happening” here,

131
00:11:22,068 --> 00:11:29,011
the old contact information is shown in a completely different format and so it’s difficult to compare.

132
00:11:29,011 --> 00:11:34,026
If you believed that you don’t need to see that information because the relevant bits aren’t in here,

133
00:11:34,026 --> 00:11:36,010
well then, just don’t include this.

134
00:11:36,010 --> 00:11:42,088
If, on the other hand, you decide that we do need to show the old version because you may want to keep it,

135
00:11:42,089 --> 00:11:45,071
in that case it probably would make it a lot more sense to show it

136
00:11:45,071 --> 00:11:50,004
in a manner that’s parallel with these other two boxes.

137
00:11:50,066 --> 00:11:55,088
What we’ve covered in these past two lectures is an understanding of the theoretical foundations

138
00:11:55,088 --> 00:11:58,038
of how the representation of information

139
00:11:58,038 --> 00:12:03,032
can have tremendous consequences in terms of the user experience of a system.

140
00:12:03,032 --> 00:12:07,009
I think this is one of the most interesting topics in all of HCI.

141
00:12:07,009 --> 00:12:10,010
And if you found this area as interesting as I did,

142
00:12:10,010 --> 00:12:12,080
there’s a couple of books that I can recommend to go further here.

143
00:12:12,080 --> 00:12:17,002
One of them is Herb Simon’s « The Sciences of the Artificial ».

144
00:12:17,002 --> 00:12:25,074
It is a great monograph, written several decades ago now, about the role of design in science

145
00:12:25,074 --> 00:12:29,057
and about the nature of mental representations — a really interesting book.

146
00:12:29,057 --> 00:12:37,057
Another one here is Ed Hutchins’ book « Cognition in the Wild » which lays out a foundation for distributed cognition.

147
00:12:37,057 --> 00:12:44,071
and describes Ed’s work in airplanes and on naval ships.

148
00:12:44,071 --> 00:12:51,043
And the last we have here is Don Norman’s book, « Things That Makes Us Smart »,

149
00:12:51,043 --> 00:12:59,037
which is a great book about a lot of the cognitive science research and distributive cognition

150
00:12:59,037 --> 00:13:02,057
and the role of representations in cognition.

151
00:13:02,057 --> 00:13:08,024
And this is one of the sources of several of these examples in this lecture, like, as are these other books, too.

152
00:13:08,024 --> 99:59:59,000
I’ll see you next time.
