1
00:00:00,000 --> 00:00:08,763
So far we’ve talked a lot about strategies and techniques for designing user interfaces and we’ve talked a little bit about high-level principles.

2
00:00:08,763 --> 00:00:16,227
What I’d like to do now is to kind of dive deep and get down to brass tacks and talk about a number of concrete examples.

3
00:00:16,227 --> 00:00:20,407
And so these lectures are going to offer two benefits simultaneously:

4
00:00:20,407 --> 00:00:31,676
First, what I’d like to do in these next couple of lectures is introduce a set of design heuristics for identifying interface errors and strategies for correcting them.

5
00:00:31,676 --> 00:00:42,362
Second, I’d like to walk you through a number of examples of actual user interfaces, and talk about particular ways in which they’re successful or have problems.

6
00:00:42,362 --> 00:00:46,682
Now, these are all screen shots that I’ve gathered over several years.

7
00:00:46,682 --> 00:00:53,629
And I keep a big file of interfaces that I think are effective or that have problems, and it’s a good activity —

8
00:00:53,629 --> 00:00:55,797
I encourage you to do the same thing.

9
00:00:55,797 --> 00:01:02,290
For any voyeurs out there, you’ll get a sense of interfaces that I’ve stumbled across over the last several years —

10
00:01:02,290 --> 00:01:04,306
not a very exciting list, but, hey.

11
00:01:04,306 --> 00:01:10,900
And all of these interfaces are things that may come up again when we talk about visual design and other principles.

12
00:01:10,900 --> 00:01:14,872
So some of these screen shots you’ll see multiple times in this class.

13
00:01:14,872 --> 00:01:21,694
Finally, I’d like to emphasize that we really want to focus on narrow issues in these user interfaces.

14
00:01:21,694 --> 00:01:30,159
And I’m not going to talk about whether the broader ecosystem that the particular thing we’re looking at is effective or not.

15
00:01:30,159 --> 00:01:36,040
So, we may point out flaws in interfaces that are on the whole exemplary,

16
00:01:36,040 --> 00:01:41,734
or we may point out successes in interfaces that are on the whole not quite so good.

17
00:01:41,734 --> 00:01:49,034
And finally, because I’ve gathered these screen shots over a number of years, many of these interfaces no longer look like this.

18
00:01:49,034 --> 00:01:56,051
The point is not the current state of an interface, but rather the didactical of teaching you a principle.

19
00:01:56,051 --> 00:02:00,023
Here are the ten design heuristics that we’re going to talk about.

20
00:02:00,023 --> 00:02:01,954
Some of these names are mine.

21
00:02:01,954 --> 00:02:05,383
The principles are based on Jakob Nielsen’s work in heuristic evaluation;

22
00:02:05,383 --> 00:02:10,481
I’ve simply relabeled a few of them to make them, I think, clearer and shorter.

23
00:02:10,481 --> 00:02:12,671
And so let’s jump in.

24
00:02:12,671 --> 00:02:16,613
The first of these principles is “show system status.”

25
00:02:16,613 --> 00:02:28,802
I think one of the most important things you can do in user interface design is provide excellent feedback about where the system is and where the user is in a larger interaction flow.

26
00:02:28,802 --> 00:02:34,062
One important thing to provide feedback about is where the user is in time.

27
00:02:34,062 --> 00:02:42,101
If you have an interactive system where the response time is less than a second or so, there is no need to have intermediate feedback:

28
00:02:42,101 --> 00:02:43,348
It just feels interactive.

29
00:02:43,348 --> 00:02:53,390
As you get to something that’s on the order of a second or a couple of seconds, it becomes important to provide some kind of feedback that an activity is underway.

30
00:02:53,390 --> 00:03:05,657
You can think of this as hourglass or a spinning ball, and if you get to something that’s more than a couple of seconds, it’s useful to show progress of how far or long in an activity that user is.

31
00:03:05,657 --> 00:03:09,023
Here we see an example of installation of a piece of software.

32
00:03:09,023 --> 00:03:21,012
And you can see the same thing if you ask a user to fill out a survey or when they’re completing their taxes, or any other process that takes a long time or may require multiple steps of input.

33
00:03:21,012 --> 00:03:35,098
You’ll want to give people feedback about how far through the system is and how far through they are. Second important category of things to provide feedback about and to show to the user is space.

34
00:03:35,098 --> 00:03:46,252
Here’s a screen shot from Gmail which notifies me that I was out of the space allocated to me and that means that I need to do something about it.

35
00:03:46,252 --> 00:03:49,907
The third important thing to show people feedback about is change.

36
00:03:49,907 --> 00:03:58,883
Here we have a dialog box that says, “You’ve changed this document, do you want to save those changes or don’t save them.” Our fourth category is action.

37
00:03:58,883 --> 00:03:59,954
Here’s a stoplight.

38
00:03:59,954 --> 00:04:09,398
So the red light means stop, the green light means go. And I like this user interface, because it uses a redundant coding to provide feedback to the user.

39
00:04:09,398 --> 00:04:19,201
So the red light is not only using red as a color, but it is up at the top of the screen; and the green light is also always at the bottom.

40
00:04:19,201 --> 00:04:26,730
In this consistency in the dual coding, both makes it faster to recognize and it helps work for a broader class of users —

41
00:04:26,730 --> 00:04:32,214
for example, not all users may be able to distinguish red from green.

42
00:04:32,214 --> 00:04:37,388
Especially in an online world, it can be important to show feedback about next steps.

43
00:04:37,388 --> 00:04:45,467
Here’s a screen shot from Amazon that says “Your message was sent to the seller and a copy was sent to the email address of your account.

44
00:04:45,467 --> 00:04:48,088
The seller will respond to you directly via email.”

45
00:04:48,088 --> 00:04:52,065
So we’re letting the user know what’s going to happen next.

46
00:04:52,065 --> 00:04:56,673
That’s important because otherwise you can wonder, “Was the message actually sent?”

47
00:04:56,673 --> 00:04:58,162
or, “Did anybody get it?”

48
00:04:58,162 --> 00:05:01,198
or “When they receive it, what are they going to do?”

49
00:05:01,198 --> 00:05:05,584
This lays out very clearly what has happened and what will happen next.

50
00:05:05,584 --> 00:05:08,884
And after you’ve crossed time, space, change, actions, and next steps.

51
00:05:08,884 --> 00:05:11,304
The last thing you want to show is completion.

52
00:05:11,304 --> 00:05:13,734
I also like this dialog box because it’s funny.

53
00:05:13,734 --> 00:05:17,927
And a little bit of humor can be really effective in user interfaces.

54
00:05:17,927 --> 00:05:30,540
Our second heuristic is to use familiar metaphors and language. And often this can mean trying to provide a match in the interface with things that people are familiar with from their real-world experience.

55
00:05:30,540 --> 00:05:39,716
This also means speak the user’s language, and follow conventions that they’re familiar with both in the online world and in the real world.

56
00:05:39,716 --> 00:05:42,525
One important kind of familiarity is metaphors.

57
00:05:42,525 --> 00:06:00,749
In this interface, I want to call your attention to the world in miniature that’s being used in the print dialog box, and that’s an effective user interface, because it makes very clear which pieces of the page are going to to be cropped, and which pieces of the page are going to to be printed.

58
00:06:00,749 --> 00:06:10,866
In general, one of the successes of the graphical user interface is that it leverages a lot of real-world metaphors, like desktop and trash and files and folders.

59
00:06:10,866 --> 00:06:17,324
And if these are activities that users are familiar with, it can help bring them into a new online world.

60
00:06:17,324 --> 00:06:29,081
Now over the last 25 years, as more and more people have gotten accustomed to computing, some of those real-world metaphors have fallen away and newer ones have developed.

61
00:06:29,081 --> 00:06:35,554
Remember that the reader of your interface is going to be a user and not your colleague, boss, or lawyer.

62
00:06:35,554 --> 00:06:42,252
And consequently, work hard to identify terms and language that will be familiar to them.

63
00:06:42,252 --> 00:06:45,444
Here’s a screenshot from a student loan website.

64
00:06:45,444 --> 00:06:54,449
And it uses two terms that at least I was unfamiliar with — It talked about me being I already enrolled in “Electronic Correspondence.”

65
00:06:54,449 --> 00:06:59,796
And it said that I was not eligible for “Electronic Bill Presentment.”

66
00:06:59,796 --> 00:07:03,899
What it really means by this I think is just email,

67
00:07:03,899 --> 00:07:10,929
and so it should say that. And I don’t think of myself as being enrolled in an email correspondence service.

68
00:07:10,929 --> 00:07:14,361
It would be nicer if it just said,

69
00:07:14,361 --> 00:07:22,498
“We’re sending you email.” And there’s some fine print about why I’m not eligible for electronic bill presentment.

70
00:07:22,498 --> 00:07:33,524
It would be much clearer if, for starters, it actually identified the reason: in my particular case this has passed a log-in wall, so it knows the reason.

71
00:07:33,524 --> 00:07:39,572
And it would be nicer if was able to use more common terms, like

72
00:07:39,572 --> 00:07:46,637
“We’re unable to send you bills and email because,” maybe, “we don’t have an address on file.”

73
00:07:46,637 --> 00:07:49,630
And it’s important to use familiar categories.

74
00:07:49,630 --> 00:07:55,048
Here’s an example from a Visa website that asks users to select a state.

75
00:07:55,048 --> 00:07:58,689
And, I got a kick out of it because there are

76
00:07:58,689 --> 00:08:00,866
more than 50 states here —

77
00:08:00,866 --> 00:08:06,173
in fact, there’s a separate listing for Northern California and Southern California.

78
00:08:06,173 --> 00:08:18,840
And many people in San Francisco might wish that Northern California and Southern California were different states; and for many people, which of those they live in or believe they live in is clear.

79
00:08:18,840 --> 00:08:34,228
But for some users, this may be ambiguous, and it would probably be simpler if you just selected California and then the system decided whether it use its Southern California routing or Northern California routing based on the address that you provide later.

80
00:08:34,228 --> 00:08:37,999
And it’s important that the choices that you offer

81
00:08:37,999 --> 00:08:42,416
to people are things that they’re likely to be familiar with.

82
00:08:42,416 --> 00:08:47,798
Here is a dialog box that says that “You have a document encoding mismatch.

83
00:08:47,798 --> 00:08:53,138
You’ve got a document which describes itself as being UTF-8, no BOM.

84
00:08:53,138 --> 00:08:57,021
But, the encoding has been set to Western ISO Latin-1.

85
00:08:57,021 --> 00:09:13,119
Now this is a developer tool and so it’s reasonable to expect some fluency with things that are under the hood, like users may in general be familiar with the idea that there are different character sets for documents.

86
00:09:13,119 --> 00:09:29,044
But users maybe not familiar with what exactly the difference is between UTF-8 no BOM and ISO Latin-1; or which of them they should select; or how exactly they should go about fixing this problem.

87
00:09:29,044 --> 00:09:36,052
One way that this interface could be improved is beaconing what the most common solution is likely to be.

88
00:09:36,052 --> 00:09:48,723
A third heuristic is user control and freedom, and this is going to encompass a number of things — like exits for mistaken choices, the ability to undo and redo, not forcing people down fixed paths.

89
00:09:48,723 --> 00:09:58,068
I think of this heuristic as being about making sure that the amount of control and freedom is appropriate for the users and appropriate for the tasks.

90
00:09:58,068 --> 00:10:06,837
So for example, if you have an interface that somebody’s only going to use once, a relatively constrained wizard may actually be a good solution.

91
00:10:06,837 --> 00:10:15,464
However, you may also want a way for users to break out of that constrained wizard if they know what they’re doing and are more expert,

92
00:10:15,464 --> 00:10:21,017
or have an uncommon or unique activity that they need to accomplish.

93
00:10:21,017 --> 00:10:30,182
Here’s an example from a conference registration site, and what you can see is that there’s a Continue button, but no Back button.

94
00:10:30,182 --> 00:10:37,040
Here’s an interface that provides more control and freedom in the context of browsing for airline tickets.

95
00:10:37,040 --> 00:10:46,113
What you see here is that there are a number of different ways in which the user can browse through the space of possible information.

96
00:10:46,113 --> 00:10:54,457
In particular you can see this calendar widget in the top left which shows you the fares for every day of that month.

97
00:10:54,457 --> 00:11:06,208
And this ability to preview what’s likely to be down a particular path is really valuable in helping people make decisions and know what options are available to them.

98
00:11:06,208 --> 00:11:09,304
Our fourth heuristic is consistency and standards.

99
00:11:09,304 --> 00:11:12,210
And this includes things like consistent layout.

100
00:11:12,210 --> 00:11:19,264
Here’s a screenshot of a very old set of dialog box options from Microsoft’s Visual Basic.

101
00:11:19,264 --> 00:11:22,933
This is many years old at this point.

102
00:11:22,933 --> 00:11:30,248
It’s pedagogically useful, because there are four different options for where the same set of buttons could be.

103
00:11:30,248 --> 00:11:38,977
And probably, applications will be easiest to learn if users can come to expect that the same buttons will always be in the same locations.

104
00:11:38,977 --> 00:11:41,287
We talked already about familiar language.

105
00:11:41,287 --> 00:11:45,398
It’s also important to be consistent in your use of language.

106
00:11:45,398 --> 00:11:55,095
And one thing that I’ve seen on the forums is, in teaching this class, whenever we’ve used terms interchangeably, that’s often been a source of confusion.

107
00:11:55,095 --> 00:11:57,750
And you can see that in this web site.

108
00:11:57,750 --> 00:12:09,901
I arrived at this screen because I wanted to get help with a USB cellular modem that I had, and I couldn’t figure out which of these categories was most likely to be the right one.

109
00:12:09,901 --> 00:12:22,375
My guess is that these categories were generated based on organizational chart for the business rather than based on the user’s conceptual model of what they care about.

110
00:12:22,375 --> 00:12:31,063
So, for example, national access and broadband access may be different parts of business and have different management structures.

111
00:12:31,063 --> 00:12:39,115
But from user’s perspective, they may not know whether the mobile device they have is of one category or the other.

112
00:12:39,115 --> 00:12:41,491
So how do you solve this naming problem?

113
00:12:41,491 --> 00:12:49,985
Because I think that, once you get familiar with your own products and designs, it’s easy to refer to them using the terms that you’re familiar with.

114
00:12:49,985 --> 00:12:56,013
And, to some extent, eventually training people up on these terms will be useful for everyone.

115
00:12:56,013 --> 00:13:02,078
However, you’ll often want to elicit what terminology users use naturally and ensure sure that you use that consistency.

116
00:13:02,078 --> 00:13:15,357
This is actually a case where field work, or focus groups, or other kinds of direct user engagement can be really valuable, and you can ask people how they would describe certain things that they might want to get help with.

117
00:13:15,357 --> 00:13:19,963
Another thing that you can do is if you prefer a more web-based strategy,

118
00:13:19,963 --> 00:13:25,391
you can have a category initially that you call Other, and let people type in whatever they want.

119
00:13:25,391 --> 00:13:36,488
And then you can look at the set of responses that come in for Other, and use that to generate umbrellas terms that may be more user centered in terms of the language they use.

120
00:13:36,488 --> 00:13:50,787
Here is a screenshot of a license repair utility, and it has a warning about the fact that you will need to close all other Adobe applications before proceeding with the license repair utility. It’s a reasonable constraint,

121
00:13:50,787 --> 00:13:54,171
and it says, “Do you wish to ” blank —

122
00:13:54,171 --> 00:13:56,256
I have blocked it out.

123
00:13:56,256 --> 00:13:57,495
Yes or no.

124
00:13:57,495 --> 00:14:09,594
My guess is that a good fraction of you — maybe even most of you — would guess that “Do you wish to…” the next thing would be continue.

125
00:14:09,594 --> 00:14:11,945
And so you might press Yes.

126
00:14:11,945 --> 00:14:16,321
However, what we actually have here is “Do you wish to cancel.”

127
00:14:16,321 --> 00:14:18,329
And so, if you press Yes to continue.

128
00:14:18,329 --> 00:14:22,557
It’s going to drop you out of the application and you’ll wonder what happened.

129
00:14:22,557 --> 00:14:26,035
Or if you press No, with the intent to cancel,

130
00:14:26,035 --> 00:14:30,010
you’ll actually continue, and you may run into problems.

131
00:14:30,010 --> 00:14:41,384
In this particular case, one way that you can solve this problem about what Yes or No or OK or Cancel mean is to replace Yes, No, OK and Cancel with more specific options.

132
00:14:41,384 --> 00:14:45,726
So here we see a dialog box where the options are very clear:

133
00:14:45,726 --> 00:14:49,230
One button says “Keep .do” as the extension name;

134
00:14:49,230 --> 00:14:51,336
the other one says “Use PDF.”

135
00:14:51,336 --> 00:14:55,495
And this is much clearer then OK and Cancel, or Yes and No.

136
00:14:55,495 --> 00:15:05,005
Our fifth heuristic is about preventing errors, and there are lots of errors that are easy to make, and there are lots of ways that your interface can help people prevent them.

137
00:15:05,005 --> 00:15:09,670
The first kind of error to prevent people from making is data loss.

138
00:15:09,670 --> 00:15:18,847
Here we have a dialog box that says “This file already exists,” and it follows our message of having concrete button names —

139
00:15:18,847 --> 00:15:19,643
That’s good.

140
00:15:19,643 --> 00:15:23,225
However, I don’t know what that file looks like.

141
00:15:23,225 --> 00:15:29,669
If it offered me a preview, it’s much less likely that I would mistake what that file is.

142
00:15:29,669 --> 00:15:34,580
In addition to preventing data loss, you can also prevent cluttering duplicates.

143
00:15:34,580 --> 00:15:41,234
Here’s a screenshot that helpfully notifies you that this may be a duplicate paper that you’re trying to import into a library.

144
00:15:41,234 --> 00:15:44,598
So it says, “Hey, you’ve already got this on your computer.”

145
00:15:44,598 --> 00:15:52,436
And so far as it goes, that’s great; but what I want to know is, is what it thinks is a duplicate actually a duplicate?

146
00:15:52,436 --> 00:16:08,818
And so one button that ought to be available here and that isn’t, and that would help me prevent errors, is by having of way of previewing what it believes the duplicate file to be, and allows me to compare the two files, side by side.

147
00:16:08,818 --> 00:16:12,579
Here’s a dialog box that says “You have unsaved data.

148
00:16:12,579 --> 00:16:20,177
Click OK to go back and save, or click Cancel to continue.” There’s a couple of problems here.

149
00:16:20,177 --> 00:16:28,036
For starters we’ve got the “click Cancel to continue,” which I think may confuse many people, and they’ll consequently lose their unsaved data.

150
00:16:28,036 --> 00:16:32,046
Also, why isn’t Save one of the options on the dialog box?

151
00:16:32,046 --> 00:16:34,363
That would make a lot more sense.

152
00:16:34,363 --> 00:16:37,854
There are many ways we could redesign this dialog box.

153
00:16:37,854 --> 00:16:43,082
You could think about automatically saving things, or many other more drastic solutions.

154
00:16:43,082 --> 00:16:51,311
A simple solution that we can make here is to relabel this first button to be — call this

155
00:16:51,311 --> 00:16:57,467
“Save,” and the other button we might call “Don’t Save,

156
00:16:57,467 --> 00:16:59,065
Just continue.”

157
00:16:59,065 --> 00:17:08,439
And we will probably want the “Save” button to be the default action.

158
00:17:08,439 --> 00:17:21,988
One of the great advantages of a graphical user interface is that it can leverage its visual structure to enforce that users provide well-formed input and to remind about what parameters are necessary.

159
00:17:21,988 --> 00:17:31,364
So this, for example, is the Find dialog box in Apple’s Keynote, and you can contrast that with the Find command in the terminal.

160
00:17:31,364 --> 00:17:38,828
In the graphical case, anything you can type into the dialog box will be a reasonable query to search for:

161
00:17:38,828 --> 00:17:41,175
It’s impossible to have incorrect syntax.

162
00:17:41,175 --> 00:17:46,794
However in the terminal case, you have to remember every time what exactly the syntax is.

163
00:17:46,794 --> 00:17:50,925
Now the terminal has lots of power and is great in lots of ways.

164
00:17:50,925 --> 00:17:55,799
But the ability to make errors in terms of your syntax is one of its drawbacks.

165
00:17:55,799 --> 00:18:03,406
But that doesn’t mean that just because you have a graphical interface, it automatically will have this property preventing errors.

166
00:18:03,406 --> 00:18:06,076
This is an example of a scheduling system.

167
00:18:06,076 --> 00:18:12,141
And the task that we’re midstream on is trying to schedule a weekly meeting into a conference room.

168
00:18:12,141 --> 00:18:19,401
And there are some things that you need to fill out that it has explicit drop downs for, like time and room.

169
00:18:19,401 --> 00:18:21,405
However, the day field is required.

170
00:18:21,405 --> 00:18:24,077
It won’t let you schedule for every day.

171
00:18:24,077 --> 00:18:37,240
But it doesn’t provide much in the way of widgets to do that; and so if the user is in a hurry, they might forget to enter a day and it’ll give an error like this that says “No day is specified.”

172
00:18:37,240 --> 00:18:44,871
And what’s shocking is when you get to this point, it doesn’t give you a chance to specify the day.

173
00:18:44,871 --> 00:18:48,840
So, there are several ways that we might simply revise this interface.

174
00:18:48,840 --> 00:18:53,952
One is that we might make the day selection widget clearer and more salient.

175
00:18:53,952 --> 00:18:58,475
And the other thing is, if somehow somebody forgets to specify a day,

176
00:18:58,475 --> 00:19:04,355
the next thing that we show them would be an option to select which of the days that we want,

177
00:19:04,355 --> 00:19:07,837
as opposed to just saying, “No, I’m sorry you did it wrong.”

178
00:19:07,837 --> 00:19:12,841
And it’s not clear at this point how you would go back or start over to modify.

179
00:19:12,841 --> 00:19:17,320
Here’s an example of a search system that provides unnecessary constraints.

180
00:19:17,320 --> 00:19:22,603
I was searching for my colleague Dan Olson’s book, so I typed Olson into the search field, and Enter.

181
00:19:22,603 --> 00:19:27,848
And I was hoping that it would give me a list of books, and I could select from among them.

182
00:19:27,848 --> 00:19:33,047
However, it says, “No, I’m sorry, you must select a catalog to begin your search in.”

183
00:19:33,047 --> 00:19:38,173
There are a number of implementation reasons why it might be preferable to select a catalog.

184
00:19:38,173 --> 00:19:44,325
And in fact, once we get going, I may even want to narrow by catalog to improve the quality of my options.

185
00:19:44,325 --> 00:19:51,726
But it doesn’t seem like you should need to select a catalog to get started — at least give me some results based on any input.

186
00:19:51,726 --> 00:20:02,001
That’s one thing that I think search systems, when implemented well, do a fantastic job of. We’ll continue our tour of heuristics in the next video.

